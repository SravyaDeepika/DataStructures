# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def verticalTraversal(self, root: Optional[TreeNode]) -> List[List[int]]:
        self.nodes=defaultdict(list)
        self.min_col=0
        self.max_col=0
        def dfs(root,level=0,vlevel=0):
            if not root:
                return []
            self.min_col=min(vlevel,self.min_col)
            self.max_col=max(vlevel,self.max_col)
            self.nodes[vlevel].append([level,root.val])
            
            dfs(root.left,level+1,vlevel-1)
            dfs(root.right,level+1,vlevel+1)
        dfs(root,0,0)
        #[(0, 1), (2, 6), (2, 5)], -1: [(1, 2)], -2: [(2, 4)], 1: [(1, 3)], 2: [(2, 7)]}
        print(self.nodes)
        res=[]
        for cols in range(self.min_col,self.max_col+1):
                t=[]
                for node in sorted(self.nodes[cols]):
                    t.append(node[1])
                res.append(t)
        return res
